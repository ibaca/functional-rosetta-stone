package org.fundamentals.fp.euler.problem2;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.List;
import java.util.function.Consumer;
import java.util.function.Predicate;
import java.util.stream.Collectors;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;
import reactor.math.MathFlux;
import reactor.util.function.Tuples;

/**
 * https://projecteuler.net/problem=2
 *
 * Original:
 *
 * Each new term in the Fibonacci sequence is generated by adding the previous two terms.
 * By starting with 1 and 2, the first 10 terms will be:
 *
 * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 *
 * By considering the terms in the Fibonacci sequence whose values
 * do not exceed four million, find the sum of the even-valued terms.
 *
 * Further information about a Fibonacci serie:
 * https://en.wikipedia.org/wiki/Fibonacci_number
 *
 * Scenario 100:
 *
 * Given a Fibonacci sequence:
 * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89
 *
 * When execute sumEven method
 * Then find the sum of the even-valued terms
 *
 */
public class EulerProblem2 {

    public List<Long> getJavaFibonaccyTerms(long limit) {

        List<Long> fibonacciList = new ArrayList<>();

        long previousNumber = 1;
        long nextNumber = 2;

        for (long i = 1; i <= limit; i++) {

            fibonacciList.add(previousNumber);

            long sum = previousNumber + nextNumber;
            previousNumber = nextNumber;
            nextNumber = sum;
        }

        return fibonacciList;
    }

    public List<BigInteger> getJavaFibonaccyTerms2(long limit) {

        List<BigInteger> fibonacciList = new ArrayList<>();

        BigInteger previousNumber = new BigInteger("1");
        BigInteger nextNumber = new BigInteger("2");
        BigInteger sum = BigInteger.ZERO;

        for (long i = 1; i <= limit; i++) {

            fibonacciList.add(previousNumber);

            sum = previousNumber.add(nextNumber);
            previousNumber = nextNumber;
            nextNumber = sum;
        }

        return fibonacciList;
    }

    public Long javaSolutionFibonacciEvenSum(long limit) {

        List<Long> fibonacciList = this.getJavaFibonaccyTerms(limit);
        long sum = 0L;

        for (long number : fibonacciList) {

            if ((number % 2) == 0) {
                sum += number;
            }

        }

        return sum;
    }

    public BigInteger javaSolutionFibonacciEvenSum2(long limit) {

        List<BigInteger> fibonacciList = this.getJavaFibonaccyTerms2(limit);
        BigInteger sum = BigInteger.ZERO;
        BigInteger TWO = new BigInteger("2");

        for(BigInteger number : fibonacciList) {

            if(number.remainder(TWO).compareTo(BigInteger.ZERO) == 0 ) {
                sum = sum.add(number);
            }

        }

        return sum;
    }

    public List<Long> getJavaStreamFibonaccyTerms(long limit) {

        return java.util.stream.Stream.iterate(new Long[]{1L, 2L}, i -> new Long[]{i[1], i[0] + i[1]})
                .limit(limit)
                .map(i -> i[0])
                .collect(Collectors.toList());
    }

    public Long javaStreamSolutionFibonacciEvenSum(long limit) {

        Consumer<Long> print = System.out::println;
        Predicate<Long> isEven = number -> (number % 2) == 0;

        return this.getJavaStreamFibonaccyTerms(limit).stream()
                .filter(isEven)
                //.peek(print)
                .collect(Collectors.summingLong(Long::longValue));
    }

    //Original code: https://github.com/vavr-io/vavr/blob/master/vavr/src/test/java/io/vavr/collection/euler/Utils.java
    public List<Long> getVAVRFibonaccyTerms(long limit) {

        Consumer<Long> print = System.out::println;

        return io.vavr.collection.Stream.of(1L, 2L)
                .appendSelf(self -> self.zip(self.tail())
                .map(t -> t._1 + (t._2)))
                .take((int)limit)
                //.peek(print)
                .collect(Collectors.toList());
    }

    public Long VAVRSolutionFibonacciEvenSum(long limit) {

        Consumer<Long> print = System.out::println;
        Predicate<Long> isEven = number -> (number % 2) == 0;

        return this.getVAVRFibonaccyTerms(limit).stream()
                .filter(isEven)
                //.peek(print)
                .collect(Collectors.summingLong(Long::longValue));
    }

    public Flux<Long> getReactorFibonaccyTerms(long limit) {

        Flux<Long> sequence = Flux.generate(
                () -> Tuples.of(1L, 2L),
                (state, sink) -> {
                    sink.next(state.getT1());
                    return Tuples.of(state.getT2(), state.getT1() + state.getT2());
                }
        );

        return sequence.take(limit);
    }

    public Flux<BigInteger> getReactorFibonaccyTerms2(long limit) {

        Flux<BigInteger> generate = Flux.generate(
                () -> Tuples.of(new BigInteger("1"), new BigInteger("2")),
                (state, sink) -> {
                    sink.next(state.getT1());
                    return Tuples.of(state.getT2(), state.getT1().add(state.getT2()));
                }
        );

        return generate.take(limit);
    }

    public Mono<Long> ReactorSolutionFibonacciEvenSum(long limit) {

        Predicate<Long> isEven = number -> (number % 2) == 0;

        return MathFlux.sumLong(this.getReactorFibonaccyTerms(limit)
                .filter(isEven));
    }

    public Mono<BigInteger> ReactorSolutionFibonacciEvenSum2(long limit) {

        Predicate<BigInteger> isEven2 = number -> {
            BigInteger TWO = new BigInteger("2");
            return number.remainder(TWO).compareTo(BigInteger.ZERO) == 0;
        };

        //return MathFlux.sumLong(this.getReactorFibonaccyTerms2(limit)
        //        .filter(isEven2));

        return Mono.just(new BigInteger("0"));
    }

}
