package org.fundamentals.fp.euler;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.List;
import java.util.function.Consumer;
import java.util.function.LongSupplier;
import java.util.function.Predicate;
import java.util.stream.Collectors;
import java.util.stream.LongStream;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;
import reactor.math.MathFlux;
import reactor.util.function.Tuples;

/**
 * https://projecteuler.net/problem=2
 *
 * Original:
 *
 * Each new term in the Fibonacci sequence is generated by adding the previous two terms.
 * By starting with 1 and 2, the first 10 terms will be:
 *
 * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 *
 * By considering the terms in the Fibonacci sequence whose values
 * do not exceed four million, find the sum of the even-valued terms.
 *
 * Further information about a Fibonacci serie:
 * https://en.wikipedia.org/wiki/Fibonacci_number
 *
 * Scenario 100:
 *
 * Given a Fibonacci sequence:
 * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89
 *
 * When execute sumEven method
 * Then find the sum of the even-valued terms
 *
 */
public class EulerProblem2 {

    public List<Long> getJavaFibonaccyTerms(long limit) {

        List<Long> fibonacciList = new ArrayList<>();

        long previousNumber = 1;
        long nextNumber = 2;

        while(true) {

            if(previousNumber > limit) {
                break;
            }

            fibonacciList.add(previousNumber);

            long sum = previousNumber + nextNumber;
            previousNumber = nextNumber;
            nextNumber = sum;
        }

        return fibonacciList;
    }

    public Long javaSolution(long limit) {

        List<Long> fibonacciList = this.getJavaFibonaccyTerms(limit);
        long sum = 0L;

        for (long number : fibonacciList) {

            if ((number % 2) == 0) {
                sum += number;
            }

        }

        return sum;
    }

    Predicate<Long> isEven = number -> (number % 2) == 0;

    public Long javaStreamSolution(long limit) {

        return Utils.JavaStreams.fibonacci()
                .skip(1)
                .mapToLong(BigInteger::longValue)
                .takeWhile(x -> x <= limit)
                .mapToObj(x -> Long.parseLong(String.valueOf(x)))
                .filter(isEven)
                .collect(Collectors.summingLong(Long::longValue));
    }

    public Long VAVRSolution(long limit) {

        return Utils.VAVR.fibonacci()
                .map(BigInteger::longValue)
                .drop(2)
                .takeWhile(f -> f <= limit)
                .filter(isEven)
                .collect(Collectors.summingLong(Long::longValue));
    }

    public Mono<Long> ReactorSolution(long limit) {

        return MathFlux.sumLong(Utils.Reactor.fibonacci()
                .takeWhile(x-> x <= limit)
                .filter(isEven));
    }

}
